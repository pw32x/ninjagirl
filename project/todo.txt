Todo

	improve scroll performance
	
	destroy enemy when offscreen
	
	draw projectiles
	
	collisions with projectiles
	
	basic collisions
	
	improve buildcolumn performance
		do a bit every frame
		
		I already know how many tiles I have to update
	
	destroying an object should just set its update and draw functions to appropriate doNothing()

	tilesets should contain their paletes
	
	automated creation of header file with object_type_ids
		header file with #defines of GAMEOBJECT_PLAYER_ID
		array of create functions in ROM
		"last checked" compares against time stamps of all cpp files with GAME_OBJECT_CREATE tag 
			if older than at least one of the animations, rebuild.
	
	automated creation of header file with VDPtileLocations (and animations?)
		array of VDPTileLocations in ram
		array of animations in rom
		header file with #defines PLAYER_ANIMATION_ID
		"last hecked"

	work in points

	place game objects on the map
	
	optimization pass
		object manager
			no loops
			no array
				just five objects
		scroll manager
			unroll rool to fill buffer
			or assembly?
				ask chat gpt

	add player standing state
	add player moving state
	
	player collisions
	physics
	
	clipping
	

	slopes?
	
	create assert 
		black screen?
		print message
			file/line


Idea Backlog 

	spawn info has id of object type instead of pointer to create function
		automatic generation of gameobject_id.h from scanning header files

	BMS backup action? 
		
			copy backup locations	



	try the SDCC Visual Studio project
		maybe debugging works well?

	add player jumping state
	
	update player tiles

	if press attack button near enough to an enemy, do a slash attack
		
	
	add player shooting state
		
	player projectiles
	player shooting animation
		contra run + shoot style?
		
	fire up/diagonal/down
		round projectiles means fewer tiles taken, but not as cool
		as shuriken		
	
	queue of vdp tile updates
		
	better jump frame?
	better run animation?
	
	enemy
	enemy collisions	
	game object library
	
	object manager
		player + projectiles + enemies + interactables
		
		small arrays to handle different types. no generic system.
		
	how to use banked roms?
		
	animated tiles
	
	automated on-demand/on-dirty conversion of gamedata to c on build 
		
	automatic building of level build function per map
		loads all background and sprite tiles
		places player
	
	
	improve map scrolling performance

	music
	sound effects

	
Game Design Ideas	
	
	enemy types
		popcorn
		flying
		running
		bouncing
		peek-a-boo
		coming out of holes
		throwing/shooting from afar
		
	upgrades
		double jump
		slide
		familiar (doubles shooting shurikens)
	
	boss
	
Completed

	DONE have a spawner object
	
	DONE create a spawn right objects

	DONE split source files into folders
		game
		engine
		
		update makefile



	BuildMasterSystem
	
		DONE copy to daily folder action

	BuildMasterSystem
	
		gg2c
		
			DONE add message when there's nothing to be done
			DONE check if the file should be exported
			
		BMS
						
			DONE don't show the powershell output text?
			DONE show the steps?
			DONE add parameters to config about how to call make

	

	DONE create types.h file

		convert to use types.h file
		
		is int 32 bits or 16?

	DONE create objecttypes.h file
	
		GameObject	
		
		
	DONE Make a todo.txt
		
	DONE destroy objects according to visibility criteria
		totally to the left
		offscreen

	DONE clip sprite drawing		
	
	DONE clean up changes to optimization
	
	BLEH move draw function to object update?	